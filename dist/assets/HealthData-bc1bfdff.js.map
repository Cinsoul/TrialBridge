{"version":3,"file":"HealthData-bc1bfdff.js","sources":["../../src/pages/patient/HealthData.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Typography, Button, Row, Tabs, Table, Tag, Empty, Spin } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { ArrowLeftOutlined, HeartOutlined, ExperimentOutlined, MedicineBoxOutlined } from '@ant-design/icons';\nimport { authService } from '../../services/authService';\nimport { patientService } from '../../services/patientService';\nimport type { HealthRecord } from '../../services/patientService';\n\nconst { Title } = Typography;\nconst { TabPane } = Tabs;\n\nconst HealthData: React.FC = () => {\n  const navigate = useNavigate();\n  const currentUser = authService.getCurrentUser();\n  const [loading, setLoading] = useState(true);\n  const [healthRecords, setHealthRecords] = useState<HealthRecord[]>([]);\n\n  // Check if user is logged in\n  useEffect(() => {\n    if (!currentUser || currentUser.role !== 'patient') {\n      navigate('/patient/login');\n    }\n  }, [currentUser, navigate]);\n\n  // Fetch health records\n  useEffect(() => {\n    const fetchHealthRecords = async () => {\n      if (currentUser?.email) {\n        try {\n          const response = await patientService.getPatientHealthRecords(currentUser.email);\n          if (response.success) {\n            setHealthRecords(response.records || []);\n          }\n        } catch (error) {\n          console.error('Error fetching health records:', error);\n        } finally {\n          setLoading(false);\n        }\n      }\n    };\n\n    fetchHealthRecords();\n  }, [currentUser]);\n\n  const handleBackToDashboard = () => {\n    navigate('/patient/dashboard');\n  };\n\n  // Filter records by type\n  const vitalRecords = healthRecords.filter(record => record.type === 'vital');\n  const labRecords = healthRecords.filter(record => record.type === 'lab');\n  const medicationRecords = healthRecords.filter(record => record.type === 'medication');\n\n  // Columns for vital signs table\n  const vitalColumns = [\n    {\n      title: 'Date',\n      dataIndex: 'date',\n      key: 'date',\n    },\n    {\n      title: 'Blood Pressure',\n      dataIndex: 'data',\n      key: 'bloodPressure',\n      render: (data: any) => data.bloodPressure || 'N/A',\n    },\n    {\n      title: 'Heart Rate',\n      dataIndex: 'data',\n      key: 'heartRate',\n      render: (data: any) => data.heartRate ? `${data.heartRate} bpm` : 'N/A',\n    },\n    {\n      title: 'Temperature',\n      dataIndex: 'data',\n      key: 'temperature',\n      render: (data: any) => data.temperature ? `${data.temperature} Â°F` : 'N/A',\n    },\n    {\n      title: 'Respiratory Rate',\n      dataIndex: 'data',\n      key: 'respiratoryRate',\n      render: (data: any) => data.respiratoryRate ? `${data.respiratoryRate} breaths/min` : 'N/A',\n    },\n    {\n      title: 'Provider',\n      dataIndex: 'provider',\n      key: 'provider',\n    },\n  ];\n\n  // Columns for lab results table\n  const labColumns = [\n    {\n      title: 'Date',\n      dataIndex: 'date',\n      key: 'date',\n    },\n    {\n      title: 'Test Name',\n      dataIndex: 'data',\n      key: 'testName',\n      render: (data: any) => data.testName || 'N/A',\n    },\n    {\n      title: 'Result',\n      dataIndex: 'data',\n      key: 'result',\n      render: (data: any) => data.result || 'N/A',\n    },\n    {\n      title: 'Reference Range',\n      dataIndex: 'data',\n      key: 'referenceRange',\n      render: (data: any) => data.referenceRange || 'N/A',\n    },\n    {\n      title: 'Status',\n      dataIndex: 'data',\n      key: 'status',\n      render: (data: any) => {\n        if (!data.status) return <Tag>N/A</Tag>;\n        \n        let color = 'green';\n        if (data.status === 'abnormal') {\n          color = 'orange';\n        } else if (data.status === 'critical') {\n          color = 'red';\n        }\n        \n        return (\n          <Tag color={color}>\n            {data.status.toUpperCase()}\n          </Tag>\n        );\n      },\n    },\n    {\n      title: 'Provider',\n      dataIndex: 'provider',\n      key: 'provider',\n    },\n  ];\n\n  // Columns for medications table\n  const medicationColumns = [\n    {\n      title: 'Date',\n      dataIndex: 'date',\n      key: 'date',\n    },\n    {\n      title: 'Medication',\n      dataIndex: 'data',\n      key: 'medication',\n      render: (data: any) => data.medication || 'N/A',\n    },\n    {\n      title: 'Dosage',\n      dataIndex: 'data',\n      key: 'dosage',\n      render: (data: any) => data.dosage || 'N/A',\n    },\n    {\n      title: 'Frequency',\n      dataIndex: 'data',\n      key: 'frequency',\n      render: (data: any) => data.frequency || 'N/A',\n    },\n    {\n      title: 'Prescribed By',\n      dataIndex: 'provider',\n      key: 'provider',\n    },\n  ];\n\n  return (\n    <div style={{ padding: '24px' }}>\n      <Row align=\"middle\" style={{ marginBottom: '24px' }}>\n        <Button \n          icon={<ArrowLeftOutlined />} \n          onClick={handleBackToDashboard}\n          style={{ marginRight: '16px' }}\n        >\n          Back\n        </Button>\n        <Title level={2} style={{ margin: 0 }}>My Health Data</Title>\n      </Row>\n\n      {loading ? (\n        <div style={{ textAlign: 'center', padding: '50px' }}>\n          <Spin size=\"large\" />\n        </div>\n      ) : (\n        <Tabs defaultActiveKey=\"vitals\">\n          <TabPane \n            tab={<span><HeartOutlined /> Vital Signs</span>}\n            key=\"vitals\"\n          >\n            {vitalRecords.length > 0 ? (\n              <Table \n                dataSource={vitalRecords} \n                columns={vitalColumns} \n                rowKey=\"id\" \n                pagination={false}\n              />\n            ) : (\n              <Empty description=\"No vital sign records found\" />\n            )}\n          </TabPane>\n          \n          <TabPane \n            tab={<span><ExperimentOutlined /> Lab Results</span>}\n            key=\"labs\"\n          >\n            {labRecords.length > 0 ? (\n              <Table \n                dataSource={labRecords} \n                columns={labColumns} \n                rowKey=\"id\" \n                pagination={false}\n              />\n            ) : (\n              <Empty description=\"No lab result records found\" />\n            )}\n          </TabPane>\n          \n          <TabPane \n            tab={<span><MedicineBoxOutlined /> Medications</span>}\n            key=\"medications\"\n          >\n            {medicationRecords.length > 0 ? (\n              <Table \n                dataSource={medicationRecords} \n                columns={medicationColumns} \n                rowKey=\"id\" \n                pagination={false}\n              />\n            ) : (\n              <Empty description=\"No medication records found\" />\n            )}\n          </TabPane>\n        </Tabs>\n      )}\n    </div>\n  );\n};\n\nexport default HealthData;"],"names":["Title","Typography","TabPane","Tabs","HealthData","navigate","useNavigate","currentUser","authService","getCurrentUser","loading","setLoading","useState","healthRecords","setHealthRecords","useEffect","role","async","email","response","patientService","getPatientHealthRecords","success","records","error","vitalRecords","filter","record","type","labRecords","medicationRecords","labColumns","title","dataIndex","key","render","data","testName","result","referenceRange","status","jsx","Tag","children","color","toUpperCase","style","padding","jsxs","Row","align","marginBottom","jsxRuntimeExports","Button","icon","ArrowLeftOutlined","onClick","marginRight","level","margin","textAlign","Spin","size","defaultActiveKey","tab","HeartOutlined","length","Table","dataSource","columns","bloodPressure","heartRate","temperature","respiratoryRate","rowKey","pagination","Empty","description","ExperimentOutlined","MedicineBoxOutlined","medication","dosage","frequency"],"mappings":"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"}