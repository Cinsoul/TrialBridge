{"version":3,"file":"trialService-28b75ce4.js","sources":["../../src/services/trialService.ts"],"sourcesContent":["import { message } from 'antd';\n\n// Mock clinical trial data\nexport interface Trial {\n  id: string;\n  title: string;\n  description: string;\n  status: 'recruiting' | 'active' | 'completed';\n  location: string;\n  startDate: string;\n  endDate: string;\n  eligibilityCriteria: string[];\n  compensation: string;\n  sponsoredBy: string;\n  contactEmail: string;\n  contactPhone: string;\n  enrolledPatients?: string[];\n}\n\nexport interface PatientApplication {\n  id: string;\n  patientEmail: string;\n  trialId: string;\n  status: 'pending' | 'approved' | 'rejected';\n  submissionDate: string;\n  notes?: string;\n}\n\n// Mock trial data\nconst mockTrials: Trial[] = [\n  {\n    id: 'trial-001',\n    title: 'Diabetes Type 2 Management Study',\n    description: 'A clinical trial studying the effects of a new medication for managing Type 2 Diabetes with fewer side effects.',\n    status: 'recruiting',\n    location: 'Boston Medical Center',\n    startDate: '2023-06-01',\n    endDate: '2024-06-01',\n    eligibilityCriteria: [\n      'Adults aged 30-65',\n      'Diagnosed with Type 2 Diabetes for at least 1 year',\n      'Currently taking oral medication for diabetes',\n      'No insulin dependency',\n      'No major cardiovascular events in the past 6 months'\n    ],\n    compensation: '$500 for completing all study visits',\n    sponsoredBy: 'PharmaCorp Inc.',\n    contactEmail: 'diabetes.study@example.com',\n    contactPhone: '555-123-4567',\n    enrolledPatients: []\n  },\n  {\n    id: 'trial-002',\n    title: 'Hypertension Treatment Efficacy',\n    description: 'Evaluating the efficacy of a new combination therapy for resistant hypertension.',\n    status: 'active',\n    location: 'Cleveland Clinic',\n    startDate: '2023-03-15',\n    endDate: '2024-09-15',\n    eligibilityCriteria: [\n      'Adults aged 40-75',\n      'Diagnosed with resistant hypertension',\n      'Currently taking at least 3 blood pressure medications',\n      'No history of stroke in the past year',\n      'No severe kidney disease'\n    ],\n    compensation: '$750 for completing all study visits',\n    sponsoredBy: 'CardioHealth Research',\n    contactEmail: 'hypertension.study@example.com',\n    contactPhone: '555-987-6543',\n    enrolledPatients: ['patient@example.com']\n  },\n  {\n    id: 'trial-003',\n    title: 'Alzheimer\\'s Early Detection',\n    description: 'Testing a new biomarker for early detection of Alzheimer\\'s disease before symptom onset.',\n    status: 'recruiting',\n    location: 'Mayo Clinic',\n    startDate: '2023-07-01',\n    endDate: '2025-07-01',\n    eligibilityCriteria: [\n      'Adults aged 55-80',\n      'Family history of Alzheimer\\'s disease',\n      'No current diagnosis of dementia or Alzheimer\\'s',\n      'Willing to undergo brain imaging',\n      'Able to attend all follow-up visits'\n    ],\n    compensation: '$1000 for completing all study visits',\n    sponsoredBy: 'Neuroscience Foundation',\n    contactEmail: 'alzheimers.study@example.com',\n    contactPhone: '555-456-7890',\n    enrolledPatients: []\n  },\n  {\n    id: 'trial-004',\n    title: 'Rheumatoid Arthritis Novel Treatment',\n    description: 'Investigating a new biologic therapy for moderate to severe rheumatoid arthritis with potential for reduced joint damage.',\n    status: 'recruiting',\n    location: 'Johns Hopkins Medical Center',\n    startDate: '2023-08-15',\n    endDate: '2025-02-15',\n    eligibilityCriteria: [\n      'Adults aged 25-70',\n      'Diagnosed with moderate to severe rheumatoid arthritis',\n      'Inadequate response to at least one conventional DMARD',\n      'No active infections',\n      'No history of tuberculosis'\n    ],\n    compensation: '$800 for completing all study visits',\n    sponsoredBy: 'ImmunoTherapeutics Inc.',\n    contactEmail: 'ra.study@example.com',\n    contactPhone: '555-234-5678',\n    enrolledPatients: []\n  },\n  {\n    id: 'trial-005',\n    title: 'Asthma Management in Urban Environments',\n    description: 'Studying the effectiveness of a combination inhaler therapy with environmental intervention for asthma patients in urban settings.',\n    status: 'active',\n    location: 'Columbia University Medical Center',\n    startDate: '2023-04-01',\n    endDate: '2024-04-01',\n    eligibilityCriteria: [\n      'Adults aged 18-60',\n      'Moderate to severe asthma diagnosis',\n      'Living in urban environment for at least 2 years',\n      'Non-smoker',\n      'No other significant respiratory conditions'\n    ],\n    compensation: '$600 for completing all study visits',\n    sponsoredBy: 'Respiratory Health Foundation',\n    contactEmail: 'asthma.study@example.com',\n    contactPhone: '555-345-6789',\n    enrolledPatients: ['robert.johnson@example.com']\n  },\n  {\n    id: 'trial-006',\n    title: 'Weight Management Program for Metabolic Syndrome',\n    description: 'Evaluating a comprehensive lifestyle intervention program for individuals with metabolic syndrome.',\n    status: 'recruiting',\n    location: 'Northwestern Memorial Hospital',\n    startDate: '2023-09-01',\n    endDate: '2024-09-01',\n    eligibilityCriteria: [\n      'Adults aged 30-65',\n      'BMI between 27-40',\n      'At least two components of metabolic syndrome',\n      'No bariatric surgery in the past',\n      'Willing to follow dietary and exercise recommendations'\n    ],\n    compensation: '$550 for completing all study visits',\n    sponsoredBy: 'Metabolic Health Institute',\n    contactEmail: 'metabolic.study@example.com',\n    contactPhone: '555-456-7890',\n    enrolledPatients: []\n  },\n  {\n    id: 'trial-007',\n    title: 'Migraine Prevention Study',\n    description: 'Testing a new oral medication for preventing chronic migraines with fewer side effects than current treatments.',\n    status: 'completed',\n    location: 'University of California Headache Center',\n    startDate: '2022-01-15',\n    endDate: '2023-01-15',\n    eligibilityCriteria: [\n      'Adults aged 18-65',\n      'History of chronic migraines (15+ headache days per month)',\n      'Failed at least two previous preventive treatments',\n      'No cardiovascular disease',\n      'Not pregnant or planning pregnancy'\n    ],\n    compensation: '$700 for completing all study visits',\n    sponsoredBy: 'NeuroPharm Research',\n    contactEmail: 'migraine.study@example.com',\n    contactPhone: '555-567-8901',\n    enrolledPatients: ['jane.smith@example.com', 'susan.williams@example.com']\n  }\n];\n\n// Mock patient applications\nconst mockApplications: PatientApplication[] = [\n  {\n    id: 'app-001',\n    patientEmail: 'patient@example.com',\n    trialId: 'trial-001',\n    status: 'pending',\n    submissionDate: '2023-05-15',\n    notes: 'Patient meets all eligibility criteria.'\n  },\n  {\n    id: 'app-002',\n    patientEmail: 'john.doe@example.com',\n    trialId: 'trial-001',\n    status: 'pending',\n    submissionDate: '2023-05-16'\n  },\n  {\n    id: 'app-003',\n    patientEmail: 'jane.smith@example.com',\n    trialId: 'trial-003',\n    status: 'pending',\n    submissionDate: '2023-05-18',\n    notes: 'Patient has concerns about the time commitment.'\n  },\n  {\n    id: 'app-004',\n    patientEmail: 'robert.johnson@example.com',\n    trialId: 'trial-001',\n    status: 'approved',\n    submissionDate: '2023-05-10',\n    notes: 'Approved and scheduled for initial screening.'\n  },\n  {\n    id: 'app-005',\n    patientEmail: 'susan.williams@example.com',\n    trialId: 'trial-003',\n    status: 'rejected',\n    submissionDate: '2023-05-05',\n    notes: 'Does not meet age requirements.'\n  },\n  {\n    id: 'app-006',\n    patientEmail: 'michael.brown@example.com',\n    trialId: 'trial-002',\n    status: 'pending',\n    submissionDate: '2023-05-20'\n  },\n  {\n    id: 'app-007',\n    patientEmail: 'patient@example.com',\n    trialId: 'trial-002',\n    status: 'approved',\n    submissionDate: '2023-02-28',\n    notes: 'Patient already enrolled and participating.'\n  },\n  {\n    id: 'app-008',\n    patientEmail: 'emily.davis@example.com',\n    trialId: 'trial-004',\n    status: 'pending',\n    submissionDate: '2023-05-10',\n    notes: 'Patient has early-stage RA and meets all eligibility criteria.'\n  },\n  {\n    id: 'app-009',\n    patientEmail: 'david.wilson@example.com',\n    trialId: 'trial-007',\n    status: 'approved',\n    submissionDate: '2022-01-20',\n    notes: 'Patient completed the full trial with excellent response to treatment.'\n  },\n  {\n    id: 'app-010',\n    patientEmail: 'michael.brown@example.com',\n    trialId: 'trial-006',\n    status: 'pending',\n    submissionDate: '2023-05-22',\n    notes: 'Patient interested in weight management program to address metabolic syndrome components.'\n  },\n  {\n    id: 'app-011',\n    patientEmail: 'john.doe@example.com',\n    trialId: 'trial-006',\n    status: 'pending',\n    submissionDate: '2023-05-21',\n    notes: 'Patient meets BMI criteria and has multiple metabolic syndrome components.'\n  },\n  {\n    id: 'app-012',\n    patientEmail: 'susan.williams@example.com',\n    trialId: 'trial-007',\n    status: 'approved',\n    submissionDate: '2022-01-25',\n    notes: 'Patient completed the full trial with good response to treatment.'\n  }\n];\n\nexport const trialService = {\n  // Get all available trials\n  getAllTrials: async () => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return { success: true, trials: mockTrials };\n  },\n\n  // Get trial by ID\n  getTrialById: async (trialId: string) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 300));\n    \n    const trial = mockTrials.find(t => t.id === trialId);\n    if (trial) {\n      return { success: true, trial };\n    }\n    return { success: false, message: 'Trial not found' };\n  },\n\n  // Get trials by status\n  getTrialsByStatus: async (status: 'recruiting' | 'active' | 'completed') => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 400));\n    \n    const trials = mockTrials.filter(t => t.status === status);\n    return { success: true, trials };\n  },\n\n  // Apply for a trial\n  applyForTrial: async (patientEmail: string, trialId: string, notes?: string) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 600));\n    \n    // Check if trial exists\n    const trial = mockTrials.find(t => t.id === trialId);\n    if (!trial) {\n      return { success: false, message: 'Trial not found' };\n    }\n    \n    // Check if already applied\n    const existingApplication = mockApplications.find(\n      app => app.patientEmail === patientEmail && app.trialId === trialId\n    );\n    \n    if (existingApplication) {\n      return { success: false, message: 'You have already applied for this trial' };\n    }\n    \n    // Create new application\n    const newApplication: PatientApplication = {\n      id: `app-${mockApplications.length + 1}`,\n      patientEmail,\n      trialId,\n      status: 'pending',\n      submissionDate: new Date().toISOString().split('T')[0],\n      notes\n    };\n    \n    mockApplications.push(newApplication);\n    message.success('Application submitted successfully!');\n    return { success: true, application: newApplication };\n  },\n\n  // Get patient applications\n  getPatientApplications: async (patientEmail: string) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 400));\n    \n    const applications = mockApplications.filter(app => app.patientEmail === patientEmail);\n    return { success: true, applications };\n  },\n\n  // Get all applications (for trial team)\n  getAllApplications: async () => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return { success: true, applications: mockApplications };\n  },\n\n  // Update application status (for trial team)\n  updateApplicationStatus: async (applicationId: string, status: 'approved' | 'rejected', notes?: string) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 600));\n    \n    const applicationIndex = mockApplications.findIndex(app => app.id === applicationId);\n    if (applicationIndex === -1) {\n      return { success: false, message: 'Application not found' };\n    }\n    \n    // Update application\n    mockApplications[applicationIndex].status = status;\n    if (notes) {\n      mockApplications[applicationIndex].notes = notes;\n    }\n    \n    // If approved, add patient to enrolled patients\n    if (status === 'approved') {\n      const application = mockApplications[applicationIndex];\n      const trialIndex = mockTrials.findIndex(t => t.id === application.trialId);\n      \n      if (trialIndex !== -1) {\n        if (!mockTrials[trialIndex].enrolledPatients) {\n          mockTrials[trialIndex].enrolledPatients = [];\n        }\n        \n        if (!mockTrials[trialIndex].enrolledPatients!.includes(application.patientEmail)) {\n          mockTrials[trialIndex].enrolledPatients!.push(application.patientEmail);\n        }\n      }\n    }\n    \n    message.success(`Application ${status === 'approved' ? 'approved' : 'rejected'} successfully!`);\n    return { success: true };\n  },\n\n  // Get enrolled patients for a trial (for trial team)\n  getEnrolledPatients: async (trialId: string) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 400));\n    \n    const trial = mockTrials.find(t => t.id === trialId);\n    if (!trial) {\n      return { success: false, message: 'Trial not found' };\n    }\n    \n    return { success: true, enrolledPatients: trial.enrolledPatients || [] };\n  }\n};"],"names":["mockTrials","id","title","description","status","location","startDate","endDate","eligibilityCriteria","compensation","sponsoredBy","contactEmail","contactPhone","enrolledPatients","mockApplications","patientEmail","trialId","submissionDate","notes","trialService","getAllTrials","async","Promise","resolve","setTimeout","success","trials","getTrialById","trial","find","t","message","getTrialsByStatus","filter","applyForTrial","app","newApplication","length","Date","toISOString","split","push","application","getPatientApplications","applications","getAllApplications","updateApplicationStatus","applicationId","applicationIndex","findIndex","trialIndex","includes","getEnrolledPatients"],"mappings":"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"}