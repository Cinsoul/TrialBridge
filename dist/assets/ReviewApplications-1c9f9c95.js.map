{"version":3,"file":"ReviewApplications-1c9f9c95.js","sources":["../../src/pages/trial-team/ReviewApplications.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Typography, Button, Row, Table, Tag, Modal, Input, message } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { ArrowLeftOutlined, CheckOutlined, CloseOutlined } from '@ant-design/icons';\nimport { authService } from '../../services/authService';\nimport { trialService } from '../../services/trialService';\nimport type { PatientApplication, Trial } from '../../services/trialService';\n\nconst { Title } = Typography;\nconst { TextArea } = Input;\n\nconst ReviewApplications: React.FC = () => {\n  const navigate = useNavigate();\n  const currentUser = authService.getCurrentUser();\n  const [applications, setApplications] = useState<PatientApplication[]>([]);\n  const [trials, setTrials] = useState<Trial[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [currentApplication, setCurrentApplication] = useState<PatientApplication | null>(null);\n  const [reviewNotes, setReviewNotes] = useState('');\n  const [approving, setApproving] = useState(false);\n\n  // Check if user is logged in\n  useEffect(() => {\n    if (!currentUser || currentUser.role !== 'trialTeam') {\n      navigate('/trial-team/login');\n    }\n  }, [currentUser, navigate]);\n\n  // Fetch applications and trials data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch all pending applications\n        const applicationsResponse = await trialService.getAllApplications();\n        if (applicationsResponse.success) {\n          setApplications(applicationsResponse.applications.filter(app => app.status === 'pending'));\n        } else {\n          message.error('Failed to load applications');\n        }\n\n        // Fetch all trials for reference\n        const trialsResponse = await trialService.getAllTrials();\n        if (trialsResponse.success) {\n          setTrials(trialsResponse.trials);\n        } else {\n          message.error('Failed to load trials');\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        message.error('An error occurred while loading data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleBackToDashboard = () => {\n    navigate('/trial-team/dashboard');\n  };\n\n  const showReviewModal = (application: PatientApplication) => {\n    setCurrentApplication(application);\n    setReviewNotes(application.notes || '');\n    setIsModalVisible(true);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n    setCurrentApplication(null);\n    setReviewNotes('');\n  };\n\n  const handleApprove = async () => {\n    if (!currentApplication) return;\n    \n    setApproving(true);\n    try {\n      // In a real app, this would call an API to approve the application\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\n      message.success('Application approved successfully!');\n      \n      // Update local state\n      setApplications(applications.filter(app => app.id !== currentApplication.id));\n      setIsModalVisible(false);\n    } catch (error) {\n      console.error('Error approving application:', error);\n      message.error('Failed to approve application');\n    } finally {\n      setApproving(false);\n    }\n  };\n\n  const handleReject = async () => {\n    if (!currentApplication) return;\n    \n    setApproving(false);\n    try {\n      // In a real app, this would call an API to reject the application\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\n      message.success('Application rejected');\n      \n      // Update local state\n      setApplications(applications.filter(app => app.id !== currentApplication.id));\n      setIsModalVisible(false);\n    } catch (error) {\n      console.error('Error rejecting application:', error);\n      message.error('Failed to reject application');\n    }\n  };\n\n  // Find trial title by ID\n  const getTrialTitle = (trialId: string) => {\n    const trial = trials.find(t => t.id === trialId);\n    return trial ? trial.title : 'Unknown Trial';\n  };\n\n  const columns = [\n    {\n      title: 'Application ID',\n      dataIndex: 'id',\n      key: 'id',\n    },\n    {\n      title: 'Patient Email',\n      dataIndex: 'patientEmail',\n      key: 'patientEmail',\n    },\n    {\n      title: 'Trial',\n      dataIndex: 'trialId',\n      key: 'trialId',\n      render: (trialId: string) => getTrialTitle(trialId),\n    },\n    {\n      title: 'Submission Date',\n      dataIndex: 'submissionDate',\n      key: 'submissionDate',\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      render: (status: string) => (\n        <Tag color=\"orange\">\n          {status.toUpperCase()}\n        </Tag>\n      ),\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_: any, record: PatientApplication) => (\n        <Button type=\"primary\" onClick={() => showReviewModal(record)}>\n          Review\n        </Button>\n      ),\n    },\n  ];\n\n  return (\n    <div style={{ padding: '24px' }}>\n      <Row align=\"middle\" style={{ marginBottom: '24px' }}>\n        <Button \n          icon={<ArrowLeftOutlined />} \n          onClick={handleBackToDashboard}\n          style={{ marginRight: '16px' }}\n        >\n          Back\n        </Button>\n        <Title level={2} style={{ margin: 0 }}>Pending Applications</Title>\n      </Row>\n\n      <Table \n        columns={columns} \n        dataSource={applications} \n        rowKey=\"id\" \n        loading={loading}\n        pagination={{ pageSize: 10 }}\n        locale={{ emptyText: 'No pending applications' }}\n      />\n\n      <Modal\n        title=\"Review Application\"\n        open={isModalVisible}\n        footer={null}\n        onCancel={handleCancel}\n      >\n        {currentApplication && (\n          <>\n            <p><strong>Patient:</strong> {currentApplication.patientEmail}</p>\n            <p><strong>Trial:</strong> {getTrialTitle(currentApplication.trialId)}</p>\n            <p><strong>Submitted:</strong> {currentApplication.submissionDate}</p>\n            \n            <div style={{ marginBottom: 16 }}>\n              <p><strong>Notes:</strong></p>\n              <TextArea \n                rows={4} \n                value={reviewNotes}\n                onChange={e => setReviewNotes(e.target.value)}\n                placeholder=\"Add review notes here...\"\n              />\n            </div>\n            \n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n              <Button \n                danger \n                icon={<CloseOutlined />}\n                onClick={handleReject}\n              >\n                Reject\n              </Button>\n              <Button \n                type=\"primary\" \n                icon={<CheckOutlined />}\n                onClick={handleApprove}\n                loading={approving}\n              >\n                Approve\n              </Button>\n            </div>\n          </>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default ReviewApplications;"],"names":["Title","Typography","TextArea","Input","ReviewApplications","navigate","useNavigate","currentUser","authService","getCurrentUser","applications","setApplications","useState","trials","setTrials","loading","setLoading","isModalVisible","setIsModalVisible","currentApplication","setCurrentApplication","reviewNotes","setReviewNotes","approving","setApproving","useEffect","role","async","applicationsResponse","trialService","getAllApplications","success","filter","app","status","message","error","trialsResponse","getAllTrials","getTrialTitle","trialId","trial","find","t","id","title","columns","dataIndex","key","render","jsx","Tag","color","children","toUpperCase","_","record","Button","type","onClick","showReviewModal","application","notes","style","padding","jsxs","Row","align","marginBottom","jsxRuntimeExports","icon","ArrowLeftOutlined","marginRight","level","margin","Table","dataSource","rowKey","pagination","pageSize","locale","emptyText","Modal","open","footer","onCancel","Fragment","patientEmail","submissionDate","rows","value","onChange","e","target","placeholder","display","justifyContent","danger","CloseOutlined","Promise","resolve","setTimeout","CheckOutlined"],"mappings":"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"}