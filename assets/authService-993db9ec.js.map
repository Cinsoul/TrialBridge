{"version":3,"file":"authService-993db9ec.js","sources":["../../src/services/authService.ts"],"sourcesContent":["import { message } from 'antd';\n\n// Mock user data for demonstration purposes\nconst mockUsers = {\n  patients: [\n    { email: 'patient@example.com', password: 'password123', phone: '1234567890' },\n    { email: 'jane.smith@example.com', password: 'jane123', phone: '2345678901' },\n    { email: 'robert.johnson@example.com', password: 'robert123', phone: '3456789012' },\n    { email: 'susan.williams@example.com', password: 'susan123', phone: '4567890123' },\n    { email: 'michael.brown@example.com', password: 'michael123', phone: '5678901234' },\n    { email: 'john.doe@example.com', password: 'john123', phone: '6789012345' },\n    { email: 'emily.davis@example.com', password: 'emily123', phone: '7890123456' },\n    { email: 'david.wilson@example.com', password: 'david123', phone: '8901234567' },\n  ],\n  trialTeam: [\n    { username: 'admin', password: 'admin123', email: 'admin@example.com' },\n    { username: 'dr.johnson', password: 'drj123', email: 'sarah.johnson@example.com' },\n    { username: 'dr.thompson', password: 'drt123', email: 'robert.thompson@example.com' },\n    { username: 'nurse.williams', password: 'nw123', email: 'sarah.williams@example.com' },\n    { username: 'coordinator', password: 'coord123', email: 'trial.coordinator@example.com' },\n  ],\n};\n\nexport interface AuthUser {\n  email?: string;\n  username?: string;\n  phone?: string;\n  role: 'patient' | 'trialTeam';\n}\n\n// Store the current user in memory (in a real app, this would use localStorage/sessionStorage)\nlet currentUser: AuthUser | null = null;\n\nexport const authService = {\n  // Login for patients (using email or phone)\n  loginPatient: async (credentials: { email?: string; phone?: string; password?: string; verificationCode?: string }) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Phone login with verification code\n    if (credentials.phone && credentials.verificationCode) {\n      const user = mockUsers.patients.find(u => u.phone === credentials.phone);\n      if (user) {\n        // In a real app, verify the code from an API\n        if (credentials.verificationCode === '123456') { // Mock verification code\n          currentUser = { phone: user.phone, role: 'patient' };\n          return { success: true, user: currentUser };\n        } else {\n          return { success: false, message: 'Invalid verification code' };\n        }\n      }\n    }\n    \n    // Email login with password\n    if (credentials.email && credentials.password) {\n      const user = mockUsers.patients.find(u => \n        u.email === credentials.email && u.password === credentials.password\n      );\n      \n      if (user) {\n        currentUser = { email: user.email, role: 'patient' };\n        return { success: true, user: currentUser };\n      }\n    }\n    \n    return { success: false, message: 'Invalid credentials' };\n  },\n  \n  // Login for trial team members\n  loginTrialTeam: async (credentials: { username: string; password: string }) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    const user = mockUsers.trialTeam.find(u => \n      u.username === credentials.username && u.password === credentials.password\n    );\n    \n    if (user) {\n      currentUser = { username: user.username, email: user.email, role: 'trialTeam' };\n      return { success: true, user: currentUser };\n    }\n    \n    return { success: false, message: 'Invalid username or password' };\n  },\n  \n  // Get the current logged-in user\n  getCurrentUser: () => {\n    return currentUser;\n  },\n  \n  // Logout the current user\n  logout: () => {\n    currentUser = null;\n    return { success: true };\n  },\n  \n  // Register a new patient (in a real app, this would call an API)\n  registerPatient: async (userData: { email: string; phone: string; password: string }) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Check if user already exists\n    const existingUser = mockUsers.patients.find(u => u.email === userData.email || u.phone === userData.phone);\n    if (existingUser) {\n      return { success: false, message: 'User with this email or phone already exists' };\n    }\n    \n    // Add the new user to our mock database\n    mockUsers.patients.push({\n      email: userData.email,\n      phone: userData.phone,\n      password: userData.password\n    });\n    \n    message.success('Registration successful! Please login.');\n    return { success: true };\n  },\n  \n  // Register a new trial team member (in a real app, this would call an API)\n  registerTrialTeam: async (userData: { username: string; email: string; password: string }) => {\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Check if user already exists\n    const existingUser = mockUsers.trialTeam.find(u => \n      u.username === userData.username || u.email === userData.email\n    );\n    if (existingUser) {\n      return { success: false, message: 'User with this username or email already exists' };\n    }\n    \n    // Add the new user to our mock database\n    mockUsers.trialTeam.push({\n      username: userData.username,\n      email: userData.email,\n      password: userData.password\n    });\n    \n    message.success('Registration successful! Please login.');\n    return { success: true };\n  },\n};"],"names":["mockUsers","patients","email","password","phone","trialTeam","username","currentUser","authService","loginPatient","async","credentials","Promise","resolve","setTimeout","verificationCode","user","find","u","role","success","message","loginTrialTeam","getCurrentUser","logout","registerPatient","userData","push","registerTrialTeam"],"mappings":"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"}