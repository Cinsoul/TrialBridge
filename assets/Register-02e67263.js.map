{"version":3,"file":"Register-02e67263.js","sources":["../../src/pages/patient/Register.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Form, Input, Button, Typography, message } from 'antd';\nimport { LockOutlined, MailOutlined, PhoneOutlined } from '@ant-design/icons';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { authService } from '../../services/authService';\n\nconst { Title, Text } = Typography;\n\ninterface RegisterForm {\n  email: string;\n  phone: string;\n  password: string;\n  confirmPassword: string;\n}\n\nconst PatientRegister: React.FC = () => {\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n\n  const [loading, setLoading] = useState(false);\n\n  const onFinish = async (values: RegisterForm) => {\n    setLoading(true);\n    try {\n      const { confirmPassword, ...userData } = values;\n      const response = await authService.registerPatient(userData);\n      \n      if (response.success) {\n        message.success('Registration successful! Please login.');\n        navigate('/patient/login');\n      } else {\n        message.error(response.message || 'Registration failed');\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      message.error('An error occurred during registration');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-card\">\n        <Title level={2} className=\"login-title\">Patient Registration</Title>\n        <Form\n          form={form}\n          name=\"patient_register\"\n          onFinish={onFinish}\n          autoComplete=\"off\"\n          layout=\"vertical\"\n          size=\"large\"\n        >\n          <Form.Item\n            name=\"email\"\n            rules={[\n              { required: true, message: 'Please input your email!' },\n              { type: 'email', message: 'Please enter a valid email!' }\n            ]}\n          >\n            <Input prefix={<MailOutlined />} placeholder=\"Email\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"phone\"\n            rules={[\n              { required: true, message: 'Please input your phone number!' },\n              { pattern: /^[0-9]{10}$/, message: 'Please enter a valid 10-digit phone number!' }\n            ]}\n          >\n            <Input prefix={<PhoneOutlined />} placeholder=\"Phone Number\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[\n              { required: true, message: 'Please input your password!' },\n              { min: 8, message: 'Password must be at least 8 characters!' }\n            ]}\n          >\n            <Input.Password prefix={<LockOutlined />} placeholder=\"Password\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"confirmPassword\"\n            dependencies={['password']}\n            rules={[\n              { required: true, message: 'Please confirm your password!' },\n              ({ getFieldValue }) => ({\n                validator(_, value) {\n                  if (!value || getFieldValue('password') === value) {\n                    return Promise.resolve();\n                  }\n                  return Promise.reject(new Error('The two passwords do not match!'));\n                },\n              }),\n            ]}\n          >\n            <Input.Password prefix={<LockOutlined />} placeholder=\"Confirm Password\" />\n          </Form.Item>\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" loading={loading} block>\n              Register\n            </Button>\n          </Form.Item>\n\n          <div style={{ textAlign: 'center' }}>\n            <Text type=\"secondary\">Already have an account? </Text>\n            <Link to=\"/patient/login\">Login here</Link>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default PatientRegister;"],"names":["Title","Text","Typography","PatientRegister","form","Form","useForm","navigate","useNavigate","loading","setLoading","useState","className","children","jsxs","jsx","level","jsxRuntimeExports","name","onFinish","async","values","confirmPassword","userData","response","authService","registerPatient","success","message","error","autoComplete","layout","size","Item","rules","required","type","Input","prefix","MailOutlined","placeholder","pattern","PhoneOutlined","min","Password","LockOutlined","dependencies","getFieldValue","validator","_","value","Promise","reject","Error","resolve","Button","htmlType","block","style","textAlign","Link","to"],"mappings":"6OAMA,MAAMA,MAAEA,EAAOC,KAAAA,GAASC,EASlBC,EAA4B,KAChC,MAAOC,GAAQC,EAAKC,UACdC,EAAWC,KAEVC,EAASC,GAAcC,YAAS,GAsBvC,aACG,MAAI,CAAAC,UAAU,kBACbC,SAACC,EAAAA,KAAA,MAAA,CAAIF,UAAU,aACbC,SAAA,CAAAE,MAACf,EAAM,CAAAgB,MAAO,EAAGJ,UAAU,cAAcC,SAAoB,yBAC7DI,EAAAH,KAACT,EAAA,CACCD,OACAc,KAAK,mBACLC,SA3BSC,MAAOC,IACtBX,GAAW,GACP,IACF,MAAMY,gBAAEA,KAAoBC,GAAaF,EACnCG,QAAiBC,EAAYC,gBAAgBH,GAE/CC,EAASG,SACXC,EAAQD,QAAQ,0CAChBpB,EAAS,mBAEDqB,EAAAC,MAAML,EAASI,SAAW,6BAE7BC,GAEPD,EAAQC,MAAM,wCAAuC,CACrD,QACAnB,GAAW,EACb,GAWMoB,aAAa,MACbC,OAAO,WACPC,KAAK,QAELnB,SAAA,CAAAI,EAAAF,IAACV,EAAK4B,KAAL,CACCf,KAAK,QACLgB,MAAO,CACL,CAAEC,UAAU,EAAMP,QAAS,4BAC3B,CAAEQ,KAAM,QAASR,QAAS,gCAG5Bf,eAACwB,EAAM,CAAAC,aAASC,EAAa,IAAIC,YAAY,YAG/CvB,EAAAF,IAACV,EAAK4B,KAAL,CACCf,KAAK,QACLgB,MAAO,CACL,CAAEC,UAAU,EAAMP,QAAS,mCAC3B,CAAEa,QAAS,cAAeb,QAAS,gDAGrCf,eAACwB,EAAM,CAAAC,aAASI,EAAc,IAAIF,YAAY,mBAGhDvB,EAAAF,IAACV,EAAK4B,KAAL,CACCf,KAAK,WACLgB,MAAO,CACL,CAAEC,UAAU,EAAMP,QAAS,+BAC3B,CAAEe,IAAK,EAAGf,QAAS,4CAGrBf,SAAAE,EAAAA,IAACsB,EAAMO,SAAN,CAAeN,aAASO,EAAA,CAAa,GAAIL,YAAY,eAGxDvB,EAAAF,IAACV,EAAK4B,KAAL,CACCf,KAAK,kBACL4B,aAAc,CAAC,YACfZ,MAAO,CACL,CAAEC,UAAU,EAAMP,QAAS,iCAC3B,EAAGmB,oBAAqB,CACtBC,UAAA,CAAUC,EAAGC,IACNA,GAASH,EAAc,cAAgBG,EAGrCC,QAAQC,OAAO,IAAIC,MAAM,oCAFvBF,QAAQG,aAOvBzC,SAAAE,EAAAA,IAACsB,EAAMO,SAAN,CAAeN,aAASO,EAAA,CAAa,GAAIL,YAAY,uBAGvDzB,EAAAA,IAAAV,EAAK4B,KAAL,CACCpB,eAAC0C,EAAO,CAAAnB,KAAK,UAAUoB,SAAS,SAAS/C,UAAkBgD,OAAK,EAAC5C,+BAKlE,MAAI,CAAA6C,MAAO,CAAEC,UAAW,UACvB9C,SAAA,CAACE,EAAAA,IAAAd,EAAA,CAAKmC,KAAK,YAAYvB,SAAyB,8BAC/CE,EAAAA,IAAA6C,EAAA,CAAKC,GAAG,iBAAiBhD,SAAU,yBAI5C"}